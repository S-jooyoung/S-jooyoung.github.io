{"version":3,"file":"component---src-templates-blog-template-js-86d0ff44da1fa0f35df8.js","mappings":"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","sources":["webpack://Keyman Log/./src/models/post.js","webpack://Keyman Log/./src/components/post-header/index.js","webpack://Keyman Log/./src/components/post-navigator/index.js","webpack://Keyman Log/./src/components/post-content/index.js","webpack://Keyman Log/./src/components/utterances/index.js","webpack://Keyman Log/./src/templates/blog-template.js"],"sourcesContent":["export default class Post {\n  constructor(node) {\n    const { id, html, excerpt, frontmatter, fields } = node;\n    const { slug } = fields;\n    const { emoji, categories, title, author, date } = frontmatter;\n\n    this.id = id;\n    this.excerpt = excerpt;\n    this.emoji = emoji;\n    this.html = html;\n    this.slug = slug;\n    this.title = title;\n    this.author = author;\n    this.date = date;\n    this.categories = categories.split(' ');\n  }\n}\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport './style.scss';\n\nfunction PostHeader({ post, viewCount }) {\n  return (\n    <header className=\"post-header\">\n      {post.emoji && <div className=\"emoji\">{post.emoji}</div>}\n      <div className=\"info\">\n        <div className=\"categories\">\n          {post.categories.map((category) => (\n            <Link className=\"category\" key={category} to={`/posts/${category}`}>\n              {category}\n            </Link>\n          ))}\n        </div>\n      </div>\n\n      <h1 className=\"title\">{post.title}</h1>\n      <div className=\"info\">\n        <div className=\"author\">\n          posted by <strong>{post.author}</strong>,\n        </div>{' '}\n        {post.date}\n        {viewCount && ` · ${viewCount} views`}\n      </div>\n    </header>\n  );\n}\nexport default PostHeader;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport './style.scss';\n\nfunction PostNavigator({ prevPost, nextPost }) {\n  return (\n    <div className=\"post-navigator\">\n      <div className=\"post-navigator-card-wrapper\">\n        {nextPost && (\n          <Link className=\"post-card prev\" key={nextPost.id} to={nextPost.slug}>\n            <div className=\"direction\">이전 글</div>\n            <div className=\"title\">{nextPost.title}</div>\n          </Link>\n        )}\n      </div>\n      <div className=\"post-navigator-card-wrapper\">\n        {prevPost && (\n          <Link className=\"post-card next\" key={prevPost.id} to={prevPost.slug}>\n            <div className=\"direction\">다음 글</div>\n            <div className=\"title\">{prevPost.title}</div>\n          </Link>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default PostNavigator;\n","import React from 'react';\nimport './style.scss';\n\nfunction PostContent({ html }) {\n  return (\n    <div className=\"post-content\">\n      <div className=\"markdown\" dangerouslySetInnerHTML={{ __html: html }} />\n    </div>\n  );\n}\n\nexport default PostContent;\n","import React, { createRef, useEffect, useRef } from 'react';\n\nconst src = 'https://utteranc.es/client.js';\nconst branch = 'master';\n\nfunction Utterances({ repo, path }) {\n  const rootElm = createRef();\n  const isUtterancesLoaded = useRef(false);\n\n  useEffect(() => {\n    if (!rootElm.current || isUtterancesLoaded.current) return;\n    const storedIsDarkMode = localStorage.getItem('isDarkMode');\n\n    const utterances = document.createElement('script');\n    const utterancesConfig = {\n      src,\n      repo,\n      branch,\n      theme: JSON.parse(storedIsDarkMode) ? 'photon-dark' : 'github-light',\n      label: 'comment',\n      async: true,\n      'issue-term': 'pathname',\n      crossorigin: 'anonymous',\n    };\n\n    Object.keys(utterancesConfig).forEach((configKey) => {\n      utterances.setAttribute(configKey, utterancesConfig[configKey]);\n    });\n    rootElm.current.appendChild(utterances);\n    isUtterancesLoaded.current = true;\n  }, [repo, rootElm, path]);\n\n  return <div className=\"utterances\" ref={rootElm} />;\n}\n\nexport default Utterances;\n","import React, { useEffect, useState } from 'react';\nimport { graphql } from 'gatsby';\nimport Layout from '../layout';\nimport Seo from '../components/seo';\nimport PostHeader from '../components/post-header';\nimport PostNavigator from '../components/post-navigator';\nimport Post from '../models/post';\nimport PostContent from '../components/post-content';\nimport Utterances from '../components/utterances';\n\nfunction BlogTemplate({ data }) {\n  const [viewCount, setViewCount] = useState(null);\n\n  const curPost = new Post(data.cur);\n  const prevPost = data.prev && new Post(data.prev);\n  const nextPost = data.next && new Post(data.next);\n  const { siteUrl, comments } = data.site?.siteMetadata;\n  const utterancesRepo = comments?.utterances?.repo;\n\n  useEffect(() => {\n    if (!siteUrl) return;\n    const namespace = siteUrl.replace(/(^\\w+:|^)\\/\\//, '');\n    const key = curPost.slug.replace(/\\//g, '');\n\n    fetch(\n      `https://api.countapi.xyz/${\n        process.env.NODE_ENV === 'development' ? 'get' : 'hit'\n      }/${namespace}/${key}`,\n    ).then(async (result) => {\n      const data = await result.json();\n      setViewCount(data.value);\n    });\n  }, [siteUrl, curPost.slug]);\n\n  return (\n    <Layout>\n      <Seo title={curPost?.title} description={curPost?.excerpt} />\n      <PostHeader post={curPost} viewCount={viewCount} />\n      <PostContent html={curPost.html} />\n      <PostNavigator prevPost={prevPost} nextPost={nextPost} />\n      {utterancesRepo && <Utterances repo={utterancesRepo} path={curPost.slug} />}\n    </Layout>\n  );\n}\n\nexport default BlogTemplate;\n\nexport const pageQuery = graphql`\n  query($slug: String, $nextSlug: String, $prevSlug: String) {\n    cur: markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      html\n      excerpt(pruneLength: 500, truncate: true)\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\n      id\n      html\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        categories\n        author\n        emoji\n      }\n      fields {\n        slug\n      }\n    }\n\n    site {\n      siteMetadata {\n        siteUrl\n        comments {\n          utterances {\n            repo\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["Post","node","id","html","excerpt","frontmatter","slug","fields","emoji","categories","title","author","date","this","split","post","viewCount","React","className","map","category","Link","key","to","prevPost","nextPost","dangerouslySetInnerHTML","__html","repo","path","rootElm","createRef","isUtterancesLoaded","useRef","useEffect","current","storedIsDarkMode","localStorage","getItem","utterances","document","createElement","utterancesConfig","src","branch","theme","JSON","parse","label","async","crossorigin","Object","keys","forEach","configKey","setAttribute","appendChild","ref","data","useState","setViewCount","curPost","cur","prev","next","site","_data$site","siteMetadata","siteUrl","comments","utterancesRepo","_comments$utterances","namespace","replace","fetch","then","result","json","value","Layout","Seo","description","PostHeader","PostContent","PostNavigator","Utterances"],"sourceRoot":""}