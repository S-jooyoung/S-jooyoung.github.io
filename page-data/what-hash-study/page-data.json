{"componentChunkName":"component---src-templates-blog-template-js","path":"/what-hash-study/","result":{"data":{"cur":{"id":"7b7beb1a-d701-5e52-8910-e667c5cfe6d0","html":"<blockquote>\n<p>막연하게 해시 알고리즘의 원리를 알지 못하고 코딩 테스트를 준비하면서 부족함을 느껴 여러 자료들을 모아 정리했습니다.🧑🏻‍💻</p>\n</blockquote>\n<h2 id=\"해시hash함수란\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9Chash%ED%95%A8%EC%88%98%EB%9E%80\" aria-label=\"해시hash함수란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시(Hash)함수란?🧐</h2>\n<p><code class=\"language-text\">해시 함수</code>란 데이터의 효율적 관리를 목적으로 임의의길이의 데이터를 고정된 길이의 데이터로 매핑하는 함수입니다. 이때 매핑 전 원래 데이터의 값을 <code class=\"language-text\">키(key)</code>, 매핑 후 데이터의 값을 <code class=\"language-text\">해시값(hash value)</code>, 매핑하는 과정 자체를 <code class=\"language-text\">해싱(hashing)</code>라고 한다.</p>\n<p><img src=\"https://images.velog.io/images/jooyoung/post/0d43e3b0-23ff-4a46-b052-aa7325d85bf8/image.png\" alt=\"\"></p>\n<h2 id=\"해시hash-테이블이란\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9Chash-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%B4%EB%9E%80\" aria-label=\"해시hash 테이블이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시(Hash) 테이블이란?🤔</h2>\n<p>해시 함수를 사용하여 키를 해시값으로 매핑하고, 이 해시값을 색인(index)혹은 주소 삼아 데이터의 값(value)을 키와 함께 저장하는 자료구조를 <code class=\"language-text\">해시테이블(hash table)</code>이라고 한다. 이때 저장되는 곳을 <code class=\"language-text\">버킷(bucket)</code> 또는 <code class=\"language-text\">슬롯(slot)</code>이라고 한다.</p>\n<p><img src=\"https://images.velog.io/images/jooyoung/post/8abc9bfd-e267-4dc7-be05-ad26777ee860/EMW1YZP.png\" alt=\"\"></p>\n<h2 id=\"해시hash-테이블-예제\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9Chash-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%98%88%EC%A0%9C\" aria-label=\"해시hash 테이블 예제 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시(Hash) 테이블 예제💡</h2>\n<p>이해를 돕기 위해 예를 들어 보겠다. 스타벅스의 메뉴를 <code class=\"language-text\">배열</code>에 저장한다고 생각하면</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">menu <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'americano'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">4000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'cappuccino'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">4500</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'vanilla latte'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">5000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'espresso'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">4000</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이런 식으로 나올 것이다. 바닐라라떼가 먹고 싶어 가격을 알고 싶다면 Linear Search(선형검색)을 하여 하나하나 찾아봐야한다. 지금은 4개의 메뉴밖에 없어서 괜찮지만 메뉴가 100개 1000개가 된다면 시간은 점점 더 오래 걸릴 것이다. 시간 복잡도는 <code class=\"language-text\">O(n)</code>이다.</p>\n<p>그렇다면 이 메뉴판을 <code class=\"language-text\">해시테이블(hash table)</code>로 만들어 보겠다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">menu <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">americano</span><span class=\"token operator\">:</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">cappuccino</span><span class=\"token operator\">:</span> <span class=\"token number\">4500</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">vanillaLatte</span><span class=\"token operator\">:</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">espresso</span><span class=\"token operator\">:</span> <span class=\"token number\">4000</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>이렇게 해시테이블로 메뉴판을 만들게 되면 <code class=\"language-text\">\"vanillaLatte\"</code>는 Key가 될 것이기에 <code class=\"language-text\">menu.americano</code>를 사용하여 바로 찾을 수 있다.👍🏻 시간복잡도는 <code class=\"language-text\">O(1)</code>이다.</p>\n<h2 id=\"해시hash-충돌-\" style=\"position:relative;\"><a href=\"#%ED%95%B4%EC%8B%9Chash-%EC%B6%A9%EB%8F%8C-\" aria-label=\"해시hash 충돌  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>해시(Hash) 충돌 💣</h2>\n<p>해시값에 이미 키가 있지만 해시 함수를 거쳐 또 다른 키값이 들어왓을 때 <code class=\"language-text\">해시(Hash) 충돌</code>이라고 부른다.</p>\n<p><img src=\"https://images.velog.io/images/jooyoung/post/942a8ecc-4192-4a09-80db-2165cbe14e61/7PTT8dT.png\" alt=\"\"></p>\n<h3 id=\"체이닝chaining\" style=\"position:relative;\"><a href=\"#%EC%B2%B4%EC%9D%B4%EB%8B%9Dchaining\" aria-label=\"체이닝chaining permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>체이닝(chaining)</h3>\n<p>해시 충돌을 해결하는 방법 중 하나로 <code class=\"language-text\">위의 그림처럼</code> 한 버킷당 들어갈 수 있는 엔트리의 수에 제한을 두지 않음으로써 모든 자료를 해시테이블에 담는 것이다. 해당 버킷에 데이터가 이미 있다면 체인처럼 노드를 추가하여 다음 노드를 가리키는 방식으로 구현하면 된다.</p>\n<br/>\n<p><strong>궁금하신 점이 있다면 아래 <code class=\"language-text\">댓글</code>로 남겨주세요!👇</strong></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%ED%95%B4%EC%8B%9Chash%ED%95%A8%EC%88%98%EB%9E%80\">해시(Hash)함수란?🧐</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%B4%EC%8B%9Chash-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%B4%EB%9E%80\">해시(Hash) 테이블이란?🤔</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%B4%EC%8B%9Chash-%ED%85%8C%EC%9D%B4%EB%B8%94-%EC%98%88%EC%A0%9C\">해시(Hash) 테이블 예제💡</a></p>\n</li>\n<li>\n<p><a href=\"#%ED%95%B4%EC%8B%9Chash-%EC%B6%A9%EB%8F%8C-\">해시(Hash) 충돌 💣</a></p>\n<ul>\n<li><a href=\"#%EC%B2%B4%EC%9D%B4%EB%8B%9Dchaining\">체이닝(chaining)</a></li>\n</ul>\n</li>\n</ul>\n</div>","excerpt":"막연하게 해시 알고리즘의 원리를 알지 못하고 코딩 테스트를 준비하면서 부족함을 느껴 여러 자료들을 모아 정리했습니다.🧑🏻‍💻 해시(Hash)함수란?🧐 란 데이터의 효율적 관리를 목적으로 임의의길이의 데이터를 고정된 길이의 데이터로 매핑하는 함수입니다. 이때 매핑 전 원래 데이터의 값을 , 매핑 후 데이터의 값을 , 매핑하는 과정 자체를 라고 한다.  해시(Hash) 테이블이란?🤔 해시 함수를 사용하여 키를 해시값으로 매핑하고, 이 해시값을 색인(index)혹은 주소 삼아 데이터의 값(value)을 키와 함께 저장하는 자료구조를 이라고 한다. 이때 저장되는 곳을  또는 이라고 한다.  해시(Hash) 테이블 예제💡 이해를 돕기 위해 예를 들어 보겠다. 스타벅스의 메뉴를 에 저장한다고 생각하면 이런 식으로 나올 것이다. 바닐라라떼가 먹고 싶어 가격을 알고 싶다면 Linear Search(선형검색)을 하여 하나하나 찾아봐야한다. 지금은 4개의 메뉴밖에 없어서 괜찮지만 메뉴가 100개 1000…","frontmatter":{"date":"July 11, 2022","title":"(알고리즘) 해시(Hash) 알고리즘","categories":"ALGORITHM","author":"키맨","emoji":"📚"},"fields":{"slug":"/what-hash-study/"}},"next":{"id":"9b7481be-1b9a-5df6-881d-34410bb69c3f","html":"<blockquote>\n<p>기본적인 정렬 알고리즘의 원리를 파악하고 어떤 식으로 구현할 수 있는지 알아봅시다.🧑🏻‍💻</p>\n</blockquote>\n<h2 id=\"선택-정렬이란\" style=\"position:relative;\"><a href=\"#%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC%EC%9D%B4%EB%9E%80\" aria-label=\"선택 정렬이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선택 정렬이란?🧐</h2>\n<p><code class=\"language-text\">선택 정렬</code>이란 이름 그대로 현재 위치에 들어갈 값을 찾아 정렬하는 배열이다.</p>\n<h3 id=\"선택-정렬-기본로직\" style=\"position:relative;\"><a href=\"#%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC-%EA%B8%B0%EB%B3%B8%EB%A1%9C%EC%A7%81\" aria-label=\"선택 정렬 기본로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선택 정렬 기본로직</h3>\n<ul>\n<li>정렬되지 않은 인덱스의 맨 앞에서부터, 이를 포함한 그 이후의 배열 값 중 가장 작은 값을 찾아간다.</li>\n<li>가장 작은 값을 찾으면, 그 값을 현재 인덱스와 값과 바꿔준다.</li>\n<li>다음 인덱스에서 위 과정을 반복해 준다.</li>\n</ul>\n<blockquote>\n<p>선택 정렬 알고리즘은 n-1개, n-2개… 1개 비교하므로 시간 복잡도는 <code class=\"language-text\">O(n^2)입니다.</code></p>\n</blockquote>\n<p><img src=\"https://velog.velcdn.com/cloudflare/jooyoung/4821fc59-6a5c-4293-ac6f-011607062893/%E1%84%89%E1%85%A5%E1%86%AB%E1%84%90%E1%85%A2%E1%86%A8%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%85%E1%85%A7%E1%86%AF.gif\" alt=\"\"></p>\n<h3 id=\"선택정렬-javasscipt-코드\" style=\"position:relative;\"><a href=\"#%EC%84%A0%ED%83%9D%EC%A0%95%EB%A0%AC-javasscipt-%EC%BD%94%EB%93%9C\" aria-label=\"선택정렬 javasscipt 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선택정렬 JavaSscipt 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> idx <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"삽입-정렬이란\" style=\"position:relative;\"><a href=\"#%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC%EC%9D%B4%EB%9E%80\" aria-label=\"삽입 정렬이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>삽입 정렬이란?🧐</h2>\n<p><code class=\"language-text\">삽입 정렬</code>이란 현재 위치에서, 그 이하의 배열들을 비교하여 자신이 들어갈 위치를 찾아, 그 위치에 삽입하는 배열 알고리즘이다.</p>\n<blockquote>\n<p>선택 정렬과 같은 시간 복잡도 <code class=\"language-text\">O(n^2)</code>을 가지고 있지만 현재 위치에서 왼쪽 배열만을 탐색하기 때문에 더 효율적인 정렬이라고 할 수 있습니다.</p>\n</blockquote>\n<h3 id=\"삽입-정렬-기본로직\" style=\"position:relative;\"><a href=\"#%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC-%EA%B8%B0%EB%B3%B8%EB%A1%9C%EC%A7%81\" aria-label=\"삽입 정렬 기본로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>삽입 정렬 기본로직</h3>\n<ul>\n<li>삽입 정렬은 두 번째 인덱스부터 시작한다. 현재 인덱스는 별도의 변수에 저장해 주고, 비교 인덱스를 현재 인덱스의 직전(-1)로 잡는다.</li>\n<li>별도로 저장해 준 <code class=\"language-text\">삽입을 위한 변수</code>와, <code class=\"language-text\">비교 인덱스의 배열 값</code>을 비교한다.</li>\n<li><code class=\"language-text\">삽입 변수의 값이 더 작으면</code> 비교 인덱스+1에 비교 인덱스의 값을 저장해 주고, 비교 인덱스를 -1 하여 비교를 반복한다.</li>\n<li>만약 <code class=\"language-text\">삽입 변수가 더 크면</code>, 비교 인덱스+1에 삽입 변수를 저장한다.</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/cloudflare/jooyoung/714963b0-98eb-46ae-986f-d12432e7ecb7/%E1%84%89%E1%85%A1%E1%86%B8%E1%84%8B%E1%85%B5%E1%86%B8%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%85%E1%85%A7%E1%86%AF.gif\" alt=\"\"></p>\n<h3 id=\"선택정렬-javasscipt-코드-1\" style=\"position:relative;\"><a href=\"#%EC%84%A0%ED%83%9D%EC%A0%95%EB%A0%AC-javasscipt-%EC%BD%94%EB%93%9C-1\" aria-label=\"선택정렬 javasscipt 코드 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>선택정렬 JavaSscipt 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> tmp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> tmp<span class=\"token punctuation\">)</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"버블-정렬이란\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC%EC%9D%B4%EB%9E%80\" aria-label=\"버블 정렬이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버블 정렬이란?🧐</h2>\n<p><code class=\"language-text\">버블 정렬</code> 매번 연속된 두 개 인덱스를 비교하여, 정한 기준의 값을 뒤로 넘겨 정렬하는 방법이다.</p>\n<h3 id=\"버블-정렬-기본로직\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC-%EA%B8%B0%EB%B3%B8%EB%A1%9C%EC%A7%81\" aria-label=\"버블 정렬 기본로직 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버블 정렬 기본로직</h3>\n<ul>\n<li>버블 정렬은 현재 인덱스 값과. 바로 이후의 인덱스 값을 비교한다.</li>\n<li><code class=\"language-text\">현재 인덱스가 더 크면</code>, 이후의 인덱스와 바꿔준다.</li>\n<li><code class=\"language-text\">이후의 인덱스가 더 크면</code>, 교환하지 않고 다음 두 연속된 배열 값을 비교한다.</li>\n<li>이를 (전체 배열의 크기 -현재까지 순환한 바퀴 수)만큼 반복한다.</li>\n</ul>\n<p><img src=\"https://velog.velcdn.com/cloudflare/jooyoung/37c3e9fd-cb2e-4bac-8195-398745858dbc/%E1%84%87%E1%85%A5%E1%84%87%E1%85%B3%E1%86%AF%E1%84%8C%E1%85%A5%E1%86%BC%E1%84%85%E1%85%A7%E1%86%AF.gif\" alt=\"\"></p>\n<h3 id=\"버블-정렬-javasscipt-코드\" style=\"position:relative;\"><a href=\"#%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC-javasscipt-%EC%BD%94%EB%93%9C\" aria-label=\"버블 정렬 javasscipt 코드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>버블 정렬 JavaSscipt 코드</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> answer <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> answer<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token number\">13</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">solution</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"마치며-\" style=\"position:relative;\"><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0-\" aria-label=\"마치며  permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>마치며 🧑🏻‍💻</h2>\n<p>글을 마치며, 코딩 테스트 문제를 보았을 때 어떤 알고리즘으로 풀면 효율적일지 시간 복잡도는 어떤 방식이 더 좋을지 생각하며 문제를 푸는 모두가 됩시당!🧑🏻‍💻</p>\n<br/>\n<p><strong>궁금하신 점이 있다면 아래 <code class=\"language-text\">댓글</code>로 남겨주세요!👇</strong></p>\n<div class=\"table-of-contents\">\n<ul>\n<li>\n<p><a href=\"#%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC%EC%9D%B4%EB%9E%80\">선택 정렬이란?🧐</a></p>\n<ul>\n<li><a href=\"#%EC%84%A0%ED%83%9D-%EC%A0%95%EB%A0%AC-%EA%B8%B0%EB%B3%B8%EB%A1%9C%EC%A7%81\">선택 정렬 기본로직</a></li>\n<li><a href=\"#%EC%84%A0%ED%83%9D%EC%A0%95%EB%A0%AC-javasscipt-%EC%BD%94%EB%93%9C\">선택정렬 JavaSscipt 코드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC%EC%9D%B4%EB%9E%80\">삽입 정렬이란?🧐</a></p>\n<ul>\n<li><a href=\"#%EC%82%BD%EC%9E%85-%EC%A0%95%EB%A0%AC-%EA%B8%B0%EB%B3%B8%EB%A1%9C%EC%A7%81\">삽입 정렬 기본로직</a></li>\n<li><a href=\"#%EC%84%A0%ED%83%9D%EC%A0%95%EB%A0%AC-javasscipt-%EC%BD%94%EB%93%9C-1\">선택정렬 JavaSscipt 코드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC%EC%9D%B4%EB%9E%80\">버블 정렬이란?🧐</a></p>\n<ul>\n<li><a href=\"#%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC-%EA%B8%B0%EB%B3%B8%EB%A1%9C%EC%A7%81\">버블 정렬 기본로직</a></li>\n<li><a href=\"#%EB%B2%84%EB%B8%94-%EC%A0%95%EB%A0%AC-javasscipt-%EC%BD%94%EB%93%9C\">버블 정렬 JavaSscipt 코드</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%EB%A7%88%EC%B9%98%EB%A9%B0-\">마치며 🧑🏻‍💻</a></p>\n</li>\n</ul>\n</div>","frontmatter":{"date":"July 10, 2022","title":"(알고리즘) 정렬 알고리즘 - JavaScript","categories":"ALGORITHM","author":"키맨","emoji":"📚"},"fields":{"slug":"/what-sorting-study/"}},"prev":null,"site":{"siteMetadata":{"siteUrl":"https://s-jooyoung.github.io","comments":{"utterances":{"repo":"S-jooyoung/S-jooyoung.github.io"}}}}},"pageContext":{"slug":"/what-hash-study/","nextSlug":"/what-sorting-study/","prevSlug":""}},"staticQueryHashes":["1073350324","1956554647","2938748437"]}